// plugins
apply plugin: 'fabric-loom'
apply plugin: 'maven-publish'
apply plugin: 'com.replaymod.preprocess'


archivesBaseName = project.archives_base_name     // in central gradle.properties

def simple_version = 'v' + project.mod_version + '+build.' + new Date().format('yyMMddHHmm')
def short_version = 'v' + project.mod_version
version = simple_version + '-' + project.minecraft_version

group = project.maven_group

if (mcVersion >= 12005) {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
} else if (project.mcVersion >= 11800) {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
} else if (project.mcVersion >= 11700) {
	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16
}


repositories {
	maven {
		url 'https://www.cursemaven.com'
	}
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }

    maven {
		url 'https://jitpack.io'
	}

    maven { url 'https://maven.aliyun.com/repository/public/' }
    mavenCentral()
}


// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
	modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}


dependencies {
    // loom
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // loader
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"    // in central gradle.properties

    // mods
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("curse.maven:carpet-349239:${project.carpet_core_version}")
}


processResources {
    from "opt-carpet-addition.accesswidener"

    inputs.property "version", short_version
    inputs.property "minecraft_requirement_version", project.minecraft_requirement_version
    inputs.property "carpet_requirement_version", project.carpet_requirement_version
    inputs.property "loader_requirement_version", project.loader_requirement_version

    filesMatching("fabric.mod.json") {
        def valueMap = [
				"version": short_version,
				"carpet_requirement_version": project.carpet_requirement_version,
				"minecraft_requirement_version": project.minecraft_requirement_version,
                "loader_requirement_version": project.loader_requirement_version,
		]
		expand valueMap
    }
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}


loom {
    accessWidenerPath.set(file("opt-carpet-addition.accesswidener"))

    runConfigs.all {
		// to make sure it generates all "Minecraft Client (:subproject_name)" applications
		ideConfigGenerated = true
        vmArgs '-Dmixin.debug.export=true'
		runDir '../../run'
	}
}

remapJar {
	remapperIsolation = true
}


java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.

    //withSourcesJar()
}


jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}
