# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [
  pull_request,
  push
]

jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [ 16, 17, 20 ]
        # and run on both Linux and Windows
        os: [
          ubuntu-latest,
          windows-latest
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v3.3.0
      - name: validate gradle wrapper
        if: ${{ !startsWith(github.event.head_commit.message, '[ci skip]') }}
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk ${{ matrix.java }}
        if: ${{ !startsWith(github.event.head_commit.message, '[ci skip]') }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
          java-package: jdk
      - name: make gradle wrapper executable
        if: ${{ runner.os != 'Windows' && !startsWith(github.event.head_commit.message, '[ci skip]') }}
        run: chmod +x ./gradlew
      - name: clean
        if: ${{ !startsWith(github.event.head_commit.message, '[ci skip]') }}
        run: ./gradlew clean
      - name: build
        if: ${{ !startsWith(github.event.head_commit.message, '[ci skip]') }}
        run: ./gradlew build
      - name: capture build artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '17' && !startsWith(github.event.head_commit.message, '[ci skip]') }} # Only upload artifacts built from the latest java on one OS
        uses: actions/upload-artifact@v3.1.2
        with:
          name: Artifacts
          path: build/libs/
      - name: upload to modrinth
        if: ${{ runner.os == 'Linux' && matrix.java == '17' && startsWith(github.event.head_commit.message, 'update mod version to ') && !startsWith(github.action_ref, 'v') }}
        run: ./gradlew modrinth
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
